#!/bin/bash

ProgName=$(basename $0)

sub_help() {
  echo "Usage: $ProgName <subcommand> [options]\n"
  echo "Subcommands:"
  echo "    tmux:        Start tmux"
  echo "    twa:         Start tmux twa window"
  echo "    mint:        Mint WebApk"
  echo "    server:      Start WAM sub_server"
  echo "    proxy:       Connect phone to proxy"
  echo "    stopproxy:   Remove proxy settings from phone"
  echo "    proto:       printroto"
  echo "    ax:          build androiX project"
  echo "    sync:        Mac only: sync local AndroidX TWA files to glinux/chromium, \n -r: sync from glinux/chromium "
  echo "    install:     Mac only: fetch builded Monochrome.apk from glinux/chromium and install"
  echo "    tag:         Update tag:permission_tot to current HEAD. \n -f: fetch from remote/local and update permission_tot tag"
  echo ""
  echo "For help with each subcommand run:"
  echo "$ProgName <subcommand> -h|--help"
  echo ""
}

sub_mint() {
  mint $1
}

sub_tmux() {
  run_tmux
}

sub_server() {
  g4d -f webapk
  g4 sync
  server
}

sub_proxy() {
  charles &
  adb reverse tcp:8888 tcp:8888
  adb shell settings put global http_proxy 127.0.0.1:8888
}

sub_proxystop() {
  sub_stopproxy
}

sub_stopproxy() {
  adb shell settings delete global http_proxy
  adb shell settings delete global global_http_proxy_host
  adb shell settings delete global global_http_proxy_port

  kill $(ps aux | grep 'charles' | awk '{print $2}')
  adb reboot
}

sub_printproto() {
  echo "web_apk: {" > $2
  printproto --proto2 --raw_protocol_buffer --multiline --message google.chrome.webapk.v1.WebApk $1 >> $2
  echo "}" >> $2
}

sub_proto() {
  sub_printproto $1 $2
}

sub_twa() {
  tmux new-window -n "TWA"
  tmux send-keys "cd ~/android-browser-helper/" C-m
  # tmux split-window -h
  # tmux send-keys "cd ~/android-browser-helper/" C-m
  # tmux send-keys "cd ~/TWA" C-m
}

sub_ax() {
  path_to_checkout=~/androidx-master-dev
  path_to_sdk=~/more-android-sdk
  cd $path_to_checkout/frameworks/support/
  ./gradlew createArchive
  if [ $? -eq 0 ]; then
    rm -rf $path_to_sdk/extra
    unzip $path_to_checkout/out/dist/top-of-tree-m2repository-all-0.zip -d $path_to_sdk/extra/
  fi
}

#mac
sub_sync() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    androidx=~/androidx-master-dev/frameworks/support/
    remote="eirage0.wat.corp.google.com:/usr/local/google/home/eirage/chromium/src/third_party/android_sdk/androidx_browser/src/"
    java="browser/browser/src/main/java/androidx/browser/"
    aidl="browser/browser/src/main/aidl/android/support/customtabs/"
    case $1 in
      "")
        scp -r $androidx$java/trusted $remote$java
        scp -r $androidx$aidl/trusted $remote$aidl
        ;;
      "-r")
        scp -r $remote$java/trusted $androidx$java
        scp -r $remote$aidl/trusted $androidx$aidl
        ;;
    esac
  fi
}

#mac
sub_install() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    case $1 in
      "-c" | "--clank")
        remote="eirage0.wat.corp.google.com:/usr/local/google/home/eirage/clankium/src/out/Android/apks/"
        ;;
      *)
        remote="eirage0.wat.corp.google.com:/usr/local/google/home/eirage/chromium/src/out/Android/apks/"
    esac
    version="" #$(date +%F_%H-%M-%S)
    set -x
    local="~/AndroidApks/"
    #local="/Volumes/GoogleDrive/My\ Drive/AndroidApks/"
    scp $remote/Monochrome.apk $local/Monochrome$version.apk

    adb install -r -d $local/Monochrome$version.apk
    set +x
  fi
}

#temp --- update location permission tag
sub_tag() {
  if [[ "$PWD" =~ .*clankium/src.* ]]; then
    #update
    git tag -d permission_tot
    git tag permission_tot
  elif [[ "$PWD" =~ .*chromium/src.* ]]; then
    #fetch
    git tag -d permission_tot
    git fetch local -p
  fi
}

sub_tot() {
  sub_tag;
}

subcommand=$1
case $subcommand in
  "" | "-h" | "--help")
    sub_help
    ;;
  *)
    shift
#    set -x
    sub_${subcommand} $@
#    set +x
    if [ $? = 127 ]; then
      echo "Error: '$subcommand' is not a known subcommand." >&2
      echo "       Run '$ProgName --help' for a list of known subcommands." >&2
      exit 1
    fi
    ;;
esac
